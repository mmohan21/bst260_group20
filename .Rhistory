knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# read data
setwd("cleaned_data")
seagrass <- read.csv("seagrass_classification_data.csv", as.is =TRUE)
# factorize relevant variables
seagrass$SPECIES <- as.factor(seagrass$SPECIES)
seagrass$SEDIMENT <- as.factor(seagrass$SEDIMENT)
seagrass$TIDAL <- as.factor(seagrass$TIDAL)
# view data
head(seagrass)
summary(seagrass)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(plotly)
seagrass %>%
ggplot() +
geom_point(aes(x=LATITUDE, y=LONGITUDE, color=SPECIES))
plot_ly(seagrass, x=~LATITUDE, y=~LONGITUDE, z=~-DEPTH, color=~SPECIES, type="scatter3d", mode="markers")
seagrass %>%
ggplot(aes(SEDIMENT, fill=SPECIES)) +
geom_bar(width=.5, position = "dodge")
seagrass %>%
ggplot(aes(TIDAL, fill=SPECIES)) +
geom_bar(width=.5, position = "dodge")
# train-test split
seagrass_train_ind <- createDataPartition(y = seagrass$SPECIES, p=0.75, list=FALSE)
train_set <- seagrass[seagrass_train_ind, ]
test_set <- seagrass[-seagrass_train_ind, ]
# fit RF using relevant features, with mtry~p/3
rf_fit <- randomForest(SPECIES ~ LATITUDE + LONGITUDE + DEPTH + SEDIMENT + TIDAL,
data=train_set, mtry = 2)
library(randomForest)
# train-test split
seagrass_train_ind <- createDataPartition(y = seagrass$SPECIES, p=0.75, list=FALSE)
train_set <- seagrass[seagrass_train_ind, ]
test_set <- seagrass[-seagrass_train_ind, ]
# fit RF using relevant features, with mtry~p/3
rf_fit <- randomForest(SPECIES ~ LATITUDE + LONGITUDE + DEPTH + SEDIMENT + TIDAL,
data=train_set, mtry = 2)
# build vector of predictions
rf_pred <- predict(rf_fit, newdata = test_set, type = "response")
# view performance metrics
confusionMatrix(table(pred = rf_pred, true = test_set$SPECIES))
# true values
plot_ly(test_set, x=~LATITUDE, y=~LONGITUDE, z=~-DEPTH, color=~SPECIES, type="scatter3d", mode="markers")
# predicted values
plot_ly(test_set, x=~LATITUDE, y=~LONGITUDE, z=~-DEPTH, color=~rf_pred, type="scatter3d", mode="markers")
test_set %>%
ggplot(aes(SEDIMENT, fill=SPECIES)) +
geom_bar(width=.5, position = "dodge")
test_set %>%
ggplot(aes(SEDIMENT, fill=rf_pred)) +
geom_bar(width=.5, position = "dodge")
View(train_set)
View(seagrass)
# read data
setwd("raw_data")
seagrass_data <- read.csv("GBR_NESP-TWQ-3.2.1-5.4_JCU_Seagrass_1984-2018_Site-surveys.csv") %>%
# filter out for rows where we have information
filter(SEDIMENT != "Not recorded" & PRESENCE_A == "Present") %>%
# delete columns we are not going to use
select(-FID, -MONTH, -YEAR,
-SURVEY_MET, -SURVEY_NAM,
# remove seagrass belonging to halophila genus
-H_CAPRICOR, -H_TRICOSTA, -H_OVALIS, -H_UNINERVI, -H_DECIPIEN, -H_SPINULOS)
View(seagrass_data)
# read data
setwd("raw_data")
seagrass_data <- read.csv("GBR_NESP-TWQ-3.2.1-5.4_JCU_Seagrass_1984-2018_Site-surveys.csv") %>%
# filter out for rows where we have information
filter(SEDIMENT != "Not recorded" & PRESENCE_A == "Present") %>%
# delete columns we are not going to use
select(#-FID, -MONTH, -YEAR,
-SURVEY_MET, -SURVEY_NAM,
# remove seagrass belonging to halophila genus
-H_CAPRICOR, -H_TRICOSTA, -H_OVALIS, -H_UNINERVI, -H_DECIPIEN, -H_SPINULOS)
# remove columns that provide little to no information (<200 observations)
seagrass_data <- seagrass_data %>% select(-C_ROTUNDAT, -T_CILIATUM, -E_ACOROIDE)
# remove rows with no seagrass observations
seagrass_data <- seagrass_data %>%
filter(C_SERRULAT=="Yes" |
S_ISOETIFO=="Yes" |
T_HEMPRICH=="Yes" |
Z_CAPRICOR=="Yes")
# build function to count number of seagrass species
count_species_present <- function(C_SERRULAT, S_ISOETIFO, T_HEMPRICH, Z_CAPRICOR) {
count = 0
if (C_SERRULAT=="Yes") {
count <- count + 1
}
if (S_ISOETIFO=="Yes") {
count <- count + 1
}
if (T_HEMPRICH=="Yes") {
count <- count + 1
}
if (Z_CAPRICOR=="Yes") {
count <- count + 1
}
return(count)
}
# count species
seagrass_data$num_species_present <- mapply(count_species_present,
seagrass_data$C_SERRULAT,
seagrass_data$S_ISOETIFO,
seagrass_data$T_HEMPRICH,
seagrass_data$Z_CAPRICOR)
# how many survey sites had more than 1 species discovered?
table(seagrass_data$num_species_present)
nrow(seagrass_data)
# function to make a species column
get_species_type <- function(C_SERRULAT, S_ISOETIFO, T_HEMPRICH, Z_CAPRICOR) {
if (C_SERRULAT=="Yes") {
return("C_SERRULAT")
} else if (S_ISOETIFO=="Yes") {
return("S_ISOETIFO")
} else if (T_HEMPRICH =="Yes") {
return("T_HEMPRICH")
} else if (Z_CAPRICOR =="Yes") {
return("Z_CAPIRCOR")
}
}
# build species column to classify species of each observation based on presence/absence
seagrass_data$SPECIES <- mapply(get_species_type,
seagrass_data$C_SERRULAT,
seagrass_data$S_ISOETIFO,
seagrass_data$T_HEMPRICH,
seagrass_data$Z_CAPRICOR)
table(seagrass_data$SPECIES)
test_set %>%
ggplot(aes(TIDAL, fill=SPECIES)) +
geom_bar(width=.5, position = "dodge")
test_set %>%
ggplot(aes(TIDAL, fill=rf_pred)) +
geom_bar(width=.5, position = "dodge")
variable_importance <- importance(rf_fit)
tmp <- data_frame(feature = rownames(variable_importance),
Gini = variable_importance[,1]) %>%
arrange(desc(Gini))
tmp
tmp %>% ggplot(aes(x=reorder(feature, Gini), y=Gini)) +
geom_bar(stat='identity') +
coord_flip() + xlab("Feature") +
theme(axis.text=element_text(size=8))
library(nnet)
# fit model
multinom_fit <- multinom(SPECIES ~ LATITUDE + LONGITUDE + DEPTH + SEDIMENT, data=train_set)
summary(multinom_fit)
# extract relative risk ratios (reference group = C_SERRULAT)
exp(coef(multinom_fit))
# predicted probabilities
predicted_prob <- predict(multinom_fit, newdata=test_set, type="probs")
# predicted classes
predicted_class <- predict(multinom_fit, newdata=test_set, type="class")
# classification performance metrics
confusionMatrix(data = predicted_class, reference = test_set$SPECIES )
# fit model
multinom_fit <- multinom(SPECIES ~ LATITUDE + LONGITUDE + DEPTH + SEDIMENT, data=train_set)
summary(multinom_fit)
# predicted probabilities
predicted_prob <- predict(multinom_fit, newdata=test_set, type="probs")
# predicted classes
predicted_class <- predict(multinom_fit, newdata=test_set, type="class")
# classification performance metrics
confusionMatrix(data = predicted_class, reference = test_set$SPECIES )
# true values
plot_ly(test_set, x=~LATITUDE, y=~LONGITUDE, z=~-DEPTH, color=~SPECIES, type="scatter3d", mode="markers")
# predicted values
plot_ly(test_set, x=~LATITUDE, y=~LONGITUDE, z=~-DEPTH, color=~predicted_class, type="scatter3d", mode="markers")
test_set %>%
ggplot(aes(SEDIMENT, fill=SPECIES)) +
geom_bar(width=.5, position = "dodge")
test_set %>%
ggplot(aes(SEDIMENT, fill=predicted_class)) +
geom_bar(width=.5, position = "dodge")
test_set %>%
ggplot(aes(TIDAL, fill=SPECIES)) +
geom_bar(width=.5, position = "dodge")
test_set %>%
ggplot(aes(TIDAL, fill=predicted_class)) +
geom_bar(width=.5, position = "dodge")
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(shinydashboardPlus)
library(shinydashboard)
